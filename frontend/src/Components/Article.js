import React, { useContext, useState } from 'react'
import { useForm } from 'react-hook-form';
import { useSelector } from 'react-redux';
import { useLocation, useNavigate } from 'react-router-dom'
import { axiosWithToken } from './axiosWithToken';
import { useEffect } from 'react';
import { Snackbar } from '@mui/material';
import { RegisterContext } from '../Contexts/RegisterContext';
import '../Components/Article.css'
import { RxPerson } from "react-icons/rx";
import { MdDelete } from "react-icons/md";
import { MdRestore } from "react-icons/md";
import { MdOutlineModeEditOutline } from "react-icons/md";
import { LiaComment } from "react-icons/lia";


function Article() {

    let {state} = useLocation();
    let {currentUser} = useSelector(state => state.userAuthorLoginReducer);
    let {register, handleSubmit} = useForm();
    let [comments, setComment] = useState("");
    useEffect(() => {
        setComment(state.comments);
    },[state])
    let [editStatus, setEditStatus] = useState(false);
    let [currentArticle, setCurrentArticle] = useState(state);
    let navigate = useNavigate();
    let {articleUpdateNotify} = useContext(RegisterContext); // accessing the context api
    let [artiUpSnack, setArtiUpSnack] = articleUpdateNotify //this maintains state for snackbar on update, delete, restore of articles
    const [snackMsg, setSnackMsg] = useState(""); // this holds the message to be displayed after a certain task

    //to change the edit status
    function editHandler(){
        setEditStatus(true);
    }

    //to save the edited article
    async function saveModifiedArticle(data){
        let modifiedArticle = {...state,...data};
        modifiedArticle.dateOfModification = new Date()
        // remove the _id key of the article as it is generated by the db
        delete modifiedArticle._id
        console.log(modifiedArticle)
        //make a http put request to save the modified data
        let res = await axiosWithToken.put(`${process.env.REACT_APP_API_URL}/author-api/article`, modifiedArticle);
        if(res.data.message === "Article updated"){
            console.log("Article updated")
            setEditStatus(false)
            setSnackMsg("Article has been Updated!")
            setArtiUpSnack(true);
            navigate(`../article/${modifiedArticle.articleId}`, {state: res.data.article})
        }
    }
    
    //to delete or restore an article
    async function deleteArticle(){
        let art = currentArticle;
        delete art._id
        let res = await axiosWithToken.put(`${process.env.REACT_APP_API_URL}/author-api/article/${currentArticle.articleId}`,art)
        if(res.data.message==="Article deleted"){
            setCurrentArticle({...currentArticle, status:false});
            setSnackMsg("Article has been Deleted!")
            setArtiUpSnack(true);
            console.log("article deleted")
        }
        if(res.data.message==="Article restored"){
            
            setCurrentArticle({...currentArticle, status:true});
            setSnackMsg("Article has been Restored!")
            setArtiUpSnack(true);
            console.log("article restored")
        }
    }


    //to submit and save comments
    async function handleCommentSubmit(data){
        data.username = currentUser.username;
        data.articleId = state.articleId;
        console.log(data)
        let res = await axiosWithToken.post(`${process.env.REACT_APP_API_URL}/user-api/comment/${state.articleId}`, data);
        console.log(res);
        if(res.data.message === 'Comment posted'){
            console.log("comment posted successfully");
            setSnackMsg("Comment posted!")
            setArtiUpSnack(true);
            navigate(`../article/${state.articleId}`, {state: state})
        }
        else{
            console.log("error while posting comment")
        }
    }

    //to convert date format
    function ISOtoUTC(iso) {
        let date = new Date(iso).getUTCDate();
        let day = new Date(iso).getUTCDay();
        let year = new Date(iso).getUTCFullYear();
        return `${date}/${day}/${year}`;
    }

    function handleClose(event){
        setArtiUpSnack(false);
    }

  return (
    <div className='container my-5'>
        {editStatus === false ? <>
            <div className='d-flex justify-content-between align-items-center'>
            <h1 className='display-3'>{state.title}</h1>
            {currentUser.userType === 'author' && 
            <>
                <div className=''>
                    <button className='btn btn-primary mt-3' onClick={editHandler}><MdOutlineModeEditOutline /></button>
                    {currentArticle.status === true?
                    <button className='btn btn-danger mt-3 ms-3' onClick={deleteArticle} ><MdDelete/></button>
                    :
                    <button className='btn btn-success mt-3 ms-3' onClick={deleteArticle}><MdRestore/></button>
                    }
                </div>
            </>}
            </div>
                    
            <h1 className='fs-3 fw-light text-secondary mt-2 mb-4'>{`Category: ${state.category}`}</h1>
            <p className='fs-5 mb-4' style={{whiteSpace:"pre-line"}}>{state.content}</p>
            <div className='d-flex'>
                <p className='fs-6 fw-lighter me-4'>{`Created On: ${ISOtoUTC(state.dateOfCreation)}`}</p>
                <p className='fs-6 fw-lighter'>{`Modified On: ${ISOtoUTC(state.dateOfModification)}`}</p>
            </div>
            {currentUser.userType === 'user' &&
                <>
                <div>
                <form onSubmit={handleSubmit(handleCommentSubmit)}>
                    <div className='d-flex justify-content-center mx-5 my-3 p-2'>
                        <input type="text" className='form-control' placeholder='Write comment here' {...register('comment')} />
                        <button className='btn btn-primary ms-4'>Add comment</button>
                    </div>
                </form>
            </div>
            </>
            }
            <div className='border border-rounded p-3 comment-section'>
                <h1 className='fs-3 fw-light text-secondary mb-4'>Comments Section</h1>
                {comments.length === 0 ?(
                    <p className="display-6">No comments yet...</p>
                ):(
                    comments.map((commentObj, index) => {
                        return <div className='bg-dark p-3 border border-white border-bottom' key={index}>
                            <p className='fs-4 fw-lighter text-light'><RxPerson className='fs-4 me-2'/>{commentObj.username.toUpperCase()}</p>
                            <p className='fs-5 fw-lighter text-light'><LiaComment className='fs-5 me-3'/>{commentObj.comment}</p>  
                        </div>
                    })
                )}
            </div></>
            :
            <div className='w-50 sm-w-75 mx-auto border border-dark p-5'>
                <form onSubmit={handleSubmit(saveModifiedArticle)}>
                    <div className='pb-4'>
                        <label className='form-label fs-5' htmlFor='title'>Title</label>
                        <input className='form-control' type='text' id='title' defaultValue={state.title} {...register('title', {required: true})} />
                    </div>

                    <div className='pb-4'>
                        <label className='form-label fs-5' htmlFor='category'>Category</label>
                        <select className='form-select' id='category' defaultValue={state.category} {...register('category', {required: true})} >
                            <option value='' disabled >select option</option>
                            <option value='programming'>Programming</option>
                            <option value='development'>Development</option>
                            <option value='life-skills'>Life skills</option>
                            <option value='other'>Other</option>
                        </select>
                    </div>
                    <div className='pb-4'>
                        <label className='form-label fs-5' htmlFor='content'>Content</label>
                        <textarea className='form-control' id='content' defaultValue={state.content} {...register('content', {required: true})}  rows='10' />
                    </div>
                    <div className='justify-content-end d-flex'>
                        <button className='btn btn-success px-3' type='submit'>Save</button>
                    </div>
                </form>
            </div>}
        <Snackbar 
            anchorOrigin={{ vertical:"bottom", horizontal:"left" }}
            open={artiUpSnack}
            autoHideDuration={4000}
            severity="success"
            onClose={handleClose}
            message={snackMsg}
            ContentProps={{
                sx:{
                  border: "1px solid black",
                  borderRadius: "40px",
                  color: "black",
                  bgcolor: "lightseagreen",
                  fontWeight: "bold",
                }
             }} >
        </Snackbar>
    </div>
  )
}

export default Article